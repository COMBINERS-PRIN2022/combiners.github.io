table(as.numeric(binomial()$linkinv(drop(X %*% o0$par)) >= .5), y)
o0 <- optim(rep(0, ncol(X)), fn = CE, X = X, y = y, lambda = -1, P =.3, method = "BFGS")
table(as.numeric(binomial()$linkinv(drop(X %*% o0$par)) >= .5), y)
o0 <- optim(rep(0, ncol(X)), fn = CE, X = X, y = y, lambda = -10, P =.3, method = "BFGS")
table(as.numeric(binomial()$linkinv(drop(X %*% o0$par)) >= .5), y)
repl_python()
py_install("seaborn")
repl_python()
py$plt$show()
repl_python()
?flexmix
install.packages("flexmix")
library(flexmix)
data("NPreg", package = "flexmix")
ex2 <- flexmix(yn ~ x, data = NPreg, k = 2,
model = list(FLXMRglm(yn ~ . + I(x^2)),
FLXMRglm(yp ~ ., family = "poisson")))
ex2
plot(ex2)
head(NPreg)
ex3 <- flexmix(yp ~ x, data = NPreg, k = 2,
model = FLXMRglm(family = "poisson"))
ex3
NPreg$class
table(NPreg$class)
FLXMRglm
debug(FLXMRglm)
ex3 <- flexmix(yp ~ x, data = NPreg, k = 2,
model = FLXMRglm(family = "poisson"))
z
ex3 <- flexmix(yp ~ x, data = NPreg, k = 2,
model = FLXMRglm(family = "poisson"))
FLXMRglm
undebug(FLXMRglm)
debug(flexmix)
ex3 <- flexmix(yp ~ x, data = NPreg, k = 2,
model = FLXMRglm(family = "poisson"))
ex3 <- flexmix(yp ~ x, data = NPreg, k = 2,
model = FLXMRglm(family = "poisson"))
flexmix:::flexmix
showMethods(flexmix)
flexmix:::FLXglm
flexmix:::flexmix
standardGeneric("flexmix")
debug(FLXfit)
ex3 <- flexmix(yp ~ x, data = NPreg, k = 2,
model = FLXMRglm(family = "poisson"))
undebug(flexmix)
ex3 <- flexmix(yp ~ x, data = NPreg, k = 2,
model = FLXMRglm(family = "poisson"))
debug(.FLXgetOK)
debug(.flexmix:::FLXgetOK)
debug(flexmix:::.FLXgetOK)
ex3 <- flexmix(yp ~ x, data = NPreg, k = 2,
model = FLXMRglm(family = "poisson"))
weights
undebug(flexmix:::.FLXgetOK)
args(FLXMRglm)
args(flexmix)
?
setClass("FLXMRziglm", contains = "FLXMRglm")
FLXMRziglm <- function(formula = . ~ .,
family = c("binomial", "poisson"), ...)
{
}
family <- match.arg(family)
setClass("FLXMRziglm", contains = "FLXMRglm")
FLXMRziglm <- function(formula = . ~ .,
family = c("binomial", "poisson"), ...)
{
family <- match.arg(family)
new("FLXMRziglm", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm"), function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept") model
setClass("FLXMRziglm", contains = "FLXMRglm")
FLXMRziglm <- function(formula = . ~ .,
family = c("binomial", "poisson"), ...)
{
family <- match.arg(family)
new("FLXMRziglm", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm"), function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept") model
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm"),
function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept")
model
})
setMethod("FLXremoveComponent", signature(model = "FLXMRziglm"), function(model, nok, ...)
{
if (1 %in% nok) as(model, "FLXMRglm") else model
})
setMethod("FLXmstep", signature(model = "FLXMRziglm"), function(model , weights , components , ...)
{
coef <- c(-Inf, rep(0, ncol(model@x)-1))
names(coef) <- colnames(model@x)
comp.1 <- with(list(coef = coef, df = 0, offset = NULL,
family = model@family), eval(model@defineComponent))
c(list(comp.1),
FLXmstep(as(model, "FLXMRglm"), weights[, -1, drop=FALSE],
components[-1]))
})
data("dmft", package = "flexmix")
Model <- FLXMRziglm(family = "poisson")
Model
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment, model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
setClass("FLXMRziglm2", contains = "FLXMRglm")
FLXMRziglm <- function(formula = . ~ .,
family = c("binomial", "poisson"), ...)
{
family <- match.arg(family)
new("FLXMRziglm2", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm2", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm2"),
function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept")
model
})
setMethod("FLXremoveComponent", signature(model = "FLXMRziglm2"), function(model, nok, ...)
{
if (1 %in% nok) as(model, "FLXMRglm") else model
})
setMethod("FLXmstep", signature(model = "FLXMRziglm2"), function(model , weights , components , ...)
{
coef <- c(-Inf, rep(0, ncol(model@x)-1))
names(coef) <- colnames(model@x)
comp.1 <- with(list(coef = coef, df = 0, offset = NULL,
family = model@family), eval(model@defineComponent))
c(list(comp.1),
FLXmstep(as(model, "FLXMRglm"), weights[, -1, drop=FALSE],
components[-1]))
})
Model <- FLXMRziglm2(family = "poisson")
FLXMRziglm2
FLXMRziglm2 <- function(formula = . ~ .,
family = c("binomial", "poisson"), ...)
{
family <- match.arg(family)
new("FLXMRziglm2", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm2", family, sep=":"))
}
Model <- FLXMRziglm2(family = "poisson")
Model
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment, model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
undebug(flexmix:::.FLXgetOK)
undebug(FLXfit)
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment, model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
FLXMRziglm2
str(FLXMRziglm2)
showMethods("FLXMRziglm")
showMethods("FLXMRziglm2")
setClass("FLXMRziglm", contains = "FLXMRglm")
FLXMRziglm <- function(formula = . ~ .,
family = c("binomial", "poisson"), ...)
{
family <- match.arg(family)
new("FLXMRziglm", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm"),
function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept")
model
})
setMethod("FLXremoveComponent", signature(model = "FLXMRziglm"),
function(model, nok, ...)
{
if (1 %in% nok) as(model, "FLXMRglm") else model
})
setMethod("FLXmstep", signature(model = "FLXMRziglm"),
function(model, weights, components, ...)
{
coef <- c(-Inf, rep(0, ncol(model@x)-1))
names(coef) <- colnames(model@x)
comp.1 <- with(list(coef = coef, df = 0, offset = NULL,
family = model@family), eval(model@defineComponent))
c(list(comp.1),
FLXmstep(as(model, "FLXMRglm"), weights[, -1, drop=FALSE],
components[-1]))
})
Model <- FLXMRziglm(family = "poisson")
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment, model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
setClass("FLXMRziglm2", contains = "FLXMRglm")
FLXMRziglm2 <- function(formula = . ~ .,
family = c("binomial", "poisson"), ...)
{
family <- match.arg(family)
new("FLXMRziglm2", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm2", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm2"),
function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept")
model
})
setMethod("FLXremoveComponent", signature(model = "FLXMRziglm2"),
function(model, nok, ...)
{
if (1 %in% nok) as(model, "FLXMRglm") else model
})
setMethod("FLXmstep", signature(model = "FLXMRziglm2"),
function(model, weights, components, ...)
{
coef <- c(-Inf, rep(0, ncol(model@x)-1))
names(coef) <- colnames(model@x)
comp.1 <- with(list(coef = coef, df = 0, offset = NULL,
family = model@family), eval(model@defineComponent))
c(list(comp.1),
FLXmstep(as(model, "FLXMRglm"), weights[, -1, drop=FALSE],
components[-1]))
})
Model <- FLXMRziglm2(family = "poisson")
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment, model = Model, k = 2 ,
data = dmft, control = list(minprior = 0.01))
setClass("FLXMRziglm2", contains = "FLXMRglm")
FLXMRziglm2 <- function(formula = . ~ .,
family = c("binomial", "poisson"), ...)
{
family <- match.arg(family)
new("FLXMRziglm2", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm2", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm2"),
function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept")
model
})
setMethod("FLXremoveComponent", signature(model = "FLXMRziglm2"),
function(model, nok, ...)
{
if (1 %in% nok) as(model, "FLXMRglm") else model
})
setMethod("FLXmstep", signature(model = "FLXMRziglm"),
function(model, weights, components, ...)
{
coef <- c(-Inf, rep(0, ncol(model@x)-1))
names(coef) <- colnames(model@x)
comp.1 <- with(list(coef = coef, df = 0, offset = NULL,
family = model@family), eval(model@defineComponent))
c(list(comp.1),
FLXmstep(as(model, "FLXMRglm"), weights[, -1, drop=FALSE],
components[-1]))
})
setClass("FLXMRziglm2", contains = "FLXMRglm")
FLXMRziglm2 <- function(formula = . ~ .,
family = c("binomial", "poisson"), ...)
{
family <- match.arg(family)
new("FLXMRziglm2", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm2", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm2"),
function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept")
model
})
setMethod("FLXremoveComponent", signature(model = "FLXMRziglm2"),
function(model, nok, ...)
{
if (1 %in% nok) as(model, "FLXMRglm") else model
})
setMethod("FLXmstep", signature(model = "FLXMRziglm"),
function(model, weights, components, ...)
{
coef <- c(-Inf, rep(0, ncol(model@x)-1))
names(coef) <- colnames(model@x)
comp.1 <- with(list(coef = coef, df = 0, offset = NULL,
family = model@family), eval(model@defineComponent))
c(list(comp.1),
FLXmstep(as(model, "FLXMRglm"), weights[, -1, drop=FALSE],
components[-1]))
})
data("dmft", package = "flexmix")
Model <- FLXMRziglm2(family = "poisson")
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment,
model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
args(FLXMRglm)
FLXMRglm
FLXmstep
showMethods(FLXmstep)
FLXMRglm
setClass("FLXMRziglm2", contains = "FLXMRglm")
FLXMRziglm2 <- function(formula = . ~ .,
family = c("binomial", "poisson"),
W = NULL,
...)
{
family <- match.arg(family)
new("FLXMRziglm2", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm2", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm2"),
function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept")
model
})
library(flexmix)
setClass("FLXMRziglm2", contains = "FLXMRglm")
FLXMRziglm2 <- function(formula = . ~ .,
family = c("binomial", "poisson"),
W = NULL,
...)
{
family <- match.arg(family)
new("FLXMRziglm2", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm2", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm2"),
function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept")
model
})
setMethod("FLXremoveComponent", signature(model = "FLXMRziglm2"),
function(model, nok, ...)
{
if (1 %in% nok) as(model, "FLXMRglm") else model
})
setMethod("FLXmstep", signature(model = "FLXMRziglm2"),
function(model, weights, components, ...)
{
coef <- c(-Inf, rep(0, ncol(model@x)-1))
names(coef) <- colnames(model@x)
comp.1 <- with(list(coef = coef, df = 0, offset = NULL,
family = model@family), eval(model@defineComponent))
c(list(comp.1),
FLXmstep(as(model, "FLXMRglm"), weights[, -1, drop=FALSE],
components[-1]))
})
data("dmft", package = "flexmix")
Model <- FLXMRziglm2(family = "poisson")
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment,
model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
logLik
setClass("FLXMRziglm2", contains = "FLXMRglm")
FLXMRziglm2 <- function(formula = . ~ .,
family = c("binomial", "poisson"),
W = NULL,
...)
{
family <- match.arg(family)
new("FLXMRziglm2", FLXMRglm(formula, family, ...),
name = paste("FLXMRziglm2", family, sep=":"))
}
setMethod("FLXgetModelmatrix", signature(model="FLXMRziglm2"),
function(model, data, formula, lhs=TRUE, ...)
{
model <- callNextMethod(model, data, formula, lhs)
if (attr(terms(model@fullformula), "intercept") == 0)
stop("please include an intercept")
model
})
setMethod("FLXremoveComponent", signature(model = "FLXMRziglm2"),
function(model, nok, ...)
{
if (1 %in% nok) as(model, "FLXMRglm") else model
})
setMethod("FLXmstep", signature(model = "FLXMRziglm"),
function(model, weights, components, ...)
{
coef <- c(-Inf, rep(0, ncol(model@x)-1))
names(coef) <- colnames(model@x)
comp.1 <- with(list(coef = coef, df = 0, offset = NULL,
family = model@family), eval(model@defineComponent))
c(list(comp.1),
FLXmstep(as(model, "FLXMRglm"), weights[, -1, drop=FALSE],
components[-1]))
})
data("dmft", package = "flexmix")
Model <- FLXMRziglm2(family = "poisson")
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment,
model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
Model <- FLXMRziglm(family = "poisson")
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment,
model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
setMethod("FLXmstep", signature(model = "FLXMRziglm2"),
function(model, weights, components, ...)
{
coef <- c(-Inf, rep(0, ncol(model@x)-1))
names(coef) <- colnames(model@x)
comp.1 <- with(list(coef = coef, df = 0, offset = NULL,
family = model@family), eval(model@defineComponent))
c(list(comp.1),
FLXmstep(as(model, "FLXMRglm"), weights[, -1, drop=FALSE],
components[-1]))
})
data("dmft", package = "flexmix")
Model <- FLXMRziglm(family = "poisson")
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment,
model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
library(flexmix)
data("dmft", package = "flexmix")
Model <- FLXMRziglm(family = "poisson")
Fitted <- flexmix(End ~ log(Begin + 0.5) + Gender + Ethnic + Treatment,
model = Model, k = 2 , data = dmft, control = list(minprior = 0.01))
summary(refit(Fitted))
install.packages("dslabs")
str(dslabs::read_mnist()$train)
library(blogdown)
setwd("~/Dropbox/WebSite/prin2/")
blogdown::serve_site()
new_site(theme = "HugoBlox/theme-academic-cv")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site(.site_dir = "themes/")
new_site(theme = "tehillamo/academic-theme")
new_site(theme = "tehillamo/academic-theme")
library(blogdown)
setwd("~/Dropbox/WebSite/prin2/")
library(blogdown)
setwd("~/Dropbox/WebSite/prin2/")
new_site(theme = "tehillamo/academic-theme")
install_theme
install_theme(theme = "HugoBlox/theme-academic-cv")
new_site(theme = "HugoBlox/theme-academic-cv")
blogdown::serve_site()
setwd("~/Dropbox/WebSite/prin_academic_v2")
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site(.site_dir = getwd())
blogdown:::preview_site()
library(blogdown)
build_site()
check_config()
check_content()
check_h
check_hugo()
check_hugo()
check_hugo()
library(blogdown)
check_hugo()
blogdown:::preview_site()
check_hugo()
blogdown::check_netlify()
blogdown:::preview_site()
library(blogdown)
blogdown::check_netlify()
check_site()
check_site()
library(blogdown)
check_site()
check_site()
file.exists("~/.Rprofile")
library(blogdown)
check_site()
library(blogdown)
check_site()
blogdown:::preview_site()
check_site()
file.exists("~/.Rprofile")
base::sys.source("~/.Rprofile", envir = environment())
environment()
edit("~/.Rprofile", envir = environment())
# Now set options to customize the behavior of blogdown for this project. Below
# are a few sample options; for more options, see
# https://bookdown.org/yihui/blogdown/global-options.html
options(
# to automatically serve the site on RStudio startup, set this option to TRUE
blogdown.serve_site.startup = FALSE,
# to disable knitting Rmd files on save, set this option to FALSE
blogdown.knit.on_save = TRUE,
# build .Rmd to .md; to build to .html (via Pandoc), set this option to 'html'
blogdown.method = 'markdown'
)
# fix Hugo version
options(blogdown.hugo.version = "0.121.1")
options()$blogdown
options()$blogdown.hugo.version
library(blogdown)
check_site()
build_site()
blogdown:::preview_site()
blogdown:::preview_site()
